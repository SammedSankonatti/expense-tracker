[{"D:\\Pro-projects\\expense-tracker\\src\\index.js":"1","D:\\Pro-projects\\expense-tracker\\src\\App.js":"2","D:\\Pro-projects\\expense-tracker\\src\\components\\Details\\Details.jsx":"3","D:\\Pro-projects\\expense-tracker\\src\\components\\Details\\styles.js":"4","D:\\Pro-projects\\expense-tracker\\src\\styles.js":"5","D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\Main.jsx":"6","D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\styles.js":"7","D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\Form\\Form.jsx":"8","D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\Form\\styles.js":"9","D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\List\\List.jsx":"10","D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\List\\styles.js":"11","D:\\Pro-projects\\expense-tracker\\src\\context\\context.js":"12","D:\\Pro-projects\\expense-tracker\\src\\context\\contextReducer.js":"13","D:\\Pro-projects\\expense-tracker\\src\\constants\\categories.js":"14","D:\\Pro-projects\\expense-tracker\\src\\utils\\formatDate.js":"15","D:\\Pro-projects\\expense-tracker\\src\\useTransactions.js":"16"},{"size":425,"mtime":1611115177847,"results":"17","hashOfConfig":"18"},{"size":1139,"mtime":1611115536751,"results":"19","hashOfConfig":"18"},{"size":727,"mtime":1611093564611,"results":"20","hashOfConfig":"18"},{"size":241,"mtime":1611016404483,"results":"21","hashOfConfig":"18"},{"size":772,"mtime":1611086653258,"results":"22","hashOfConfig":"18"},{"size":1480,"mtime":1611119600975,"results":"23","hashOfConfig":"18"},{"size":512,"mtime":1611016646228,"results":"24","hashOfConfig":"18"},{"size":5044,"mtime":1611117941899,"results":"25","hashOfConfig":"18"},{"size":245,"mtime":1611018208589,"results":"26","hashOfConfig":"18"},{"size":1708,"mtime":1611086976158,"results":"27","hashOfConfig":"18"},{"size":414,"mtime":1611019590141,"results":"28","hashOfConfig":"18"},{"size":803,"mtime":1611085166184,"results":"29","hashOfConfig":"18"},{"size":455,"mtime":1611089306297,"results":"30","hashOfConfig":"18"},{"size":1691,"mtime":1611089258518,"results":"31","hashOfConfig":"18"},{"size":360,"mtime":1611090768923,"results":"32","hashOfConfig":"18"},{"size":1158,"mtime":1611094120657,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11o0ne4",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Pro-projects\\expense-tracker\\src\\index.js",[],"D:\\Pro-projects\\expense-tracker\\src\\App.js",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Details\\Details.jsx",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Details\\styles.js",[],"D:\\Pro-projects\\expense-tracker\\src\\styles.js",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\Main.jsx",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\styles.js",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\Form\\Form.jsx",["68"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport {TextField , Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\n\r\nimport { ExpenseTrackerContext } from '../../../context/context';\r\nimport {v4 as uuidv4}  from 'uuid';\r\nimport useStyles from './styles';\r\n\r\nimport {incomeCategories, expenseCategories} from '../../../constants/categories';\r\nimport formatDate from '../../../utils/formatDate.js';\r\n\r\nimport {useSpeechContext}  from '@speechly/react-client';\r\n\r\nconst initialState={\r\n    amount: ' ',\r\n    category: ' ',\r\n    type: 'Income',\r\n    date: formatDate(new Date()),\r\n}\r\n\r\nconst Form = () => {\r\n    const classes = useStyles();\r\n    const [formData, setFormData] = useState(initialState);\r\n    const {addTransaction } = useContext(ExpenseTrackerContext);\r\n\r\n    const {segment } = useSpeechContext();\r\n    \r\n    const createTransaction= ()=>{\r\n        if(Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n\r\n        const transaction={ ...formData, amount: Number(formData.amount), id:uuidv4()}\r\n        addTransaction(transaction);\r\n        setFormData(initialState); \r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(segment){\r\n            if(segment.intent.intent === 'add_expense'){\r\n                setFormData({ ...formData,  type: 'Expense' });\r\n            } else if( segment.intent.intent === 'add_income' ){\r\n                setFormData({ ...formData, type: 'Income'});\r\n            } else if( segment.isFinal && segment.intent.intent === \"create_transaction\"){\r\n                return createTransaction();\r\n            } else if( segment.isFinal && segment.intent.intent === 'cancel_transaction'){\r\n                return setFormData(initialState);\r\n            }\r\n\r\n            segment.entities.forEach((e)=>{\r\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`\r\n                switch (e.type) {\r\n                    case 'amount' :\r\n                        setFormData({...formData, amount:e.value});\r\n                    break;\r\n                    case 'category' :\r\n                        if(incomeCategories.map((ic)=> ic.type ).includes(category)){\r\n                             setFormData({...formData, type: 'Income', category});\r\n                        }else if(expenseCategories.map((ic)=> ic.type ).includes(category)){\r\n                             setFormData({...formData, type: 'Expense', category});\r\n                        }\r\n                       \r\n                    break; \r\n                    case 'date':\r\n                        setFormData({...formData, date: e.value});\r\n                    break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n            if(segment.isFinal && formData.amount && formData.date && formData.category && formData.type){\r\n                createTransaction();\r\n            }\r\n\r\n        }\r\n    }, [segment ]);\r\n\r\n    const selectedCaterogies = formData.type==='Income' ? incomeCategories : expenseCategories;\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12} >\r\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n                        {segment && segment.words.map((w)=> w.value).join(\" \") }\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6} >\r\n                <FormControl fullWidth >\r\n                    <InputLabel> Type</InputLabel>\r\n                    <Select value={formData.type} onChange={(e)=> setFormData({...formData, type:e.target.value})} >\r\n                        <MenuItem value=\"Income\"  > Income</MenuItem>\r\n                        <MenuItem value=\"Expense\" > Expense</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth >\r\n                    <InputLabel> Category</InputLabel>\r\n                    <Select value={formData.category} onChange={(e)=> setFormData({...formData, category: e.target.value})} >\r\n                        { selectedCaterogies.map((c)=>\r\n                            <MenuItem key={c.type} value={c.type}>\r\n                                {c.type}\r\n                            </MenuItem>\r\n                        ) }\r\n                    </Select>\r\n                </FormControl>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField type=\"number\" label=\"Amount\" fullWidth value={formData.amount} onChange={(e)=>setFormData({...formData, amount: e.target.value})} />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextField type=\"date\" label=\"Date\" fullWidth value={formData.date} onChange={(e)=> setFormData({...formData, date: formatDate(e.target.value)}) } />\r\n            </Grid>\r\n            <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction} > CREATE</Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n",["69","70"],"D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\Form\\styles.js",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\List\\List.jsx",[],"D:\\Pro-projects\\expense-tracker\\src\\components\\Main\\List\\styles.js",[],"D:\\Pro-projects\\expense-tracker\\src\\context\\context.js",[],"D:\\Pro-projects\\expense-tracker\\src\\context\\contextReducer.js",[],"D:\\Pro-projects\\expense-tracker\\src\\constants\\categories.js",[],"D:\\Pro-projects\\expense-tracker\\src\\utils\\formatDate.js",[],"D:\\Pro-projects\\expense-tracker\\src\\useTransactions.js",[],{"ruleId":"71","severity":1,"message":"72","line":73,"column":8,"nodeType":"73","endLine":73,"endColumn":18,"suggestions":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["79"],"no-native-reassign",["80"],"no-negated-in-lhs",["81"],{"desc":"82","fix":"83"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"84","text":"85"},[2958,2968],"[createTransaction, formData, segment]"]